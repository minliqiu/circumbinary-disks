import csv
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
import rebound

sim = rebound.Simulation()
sim.integrator = "whfast"
sim.dt = 1e-5 #timestep to start with

# alpha=0.5 #massfunction, alpha>=0.5, m1<=m2
# e=0
# vy1=pow((1-e)*(1-alpha), 1/2)*(1-alpha)/alpha
# vy0=-alpha/(1-alpha)*pow((1-e)*(1-alpha), 1/2)*(1-alpha)/alpha
# sim.add(m=1, x=-alpha, y=0, z=0, vx=0, vy=vy0, vz=0) #star A
# sim.add(m=alpha/(1-alpha), x=1-alpha, y=0, z=0, vx=0, vy=vy1, vz=0) #star B
sim.add(m=1)
sim.add(m=1, a=1, e=0)
sim.move_to_com()

ri = 2.49
sim.add(x=ri, vy=-0.1709*ri+1.3238625) #massless particle, a is the initial radius
# sim.add(a=ri)2.495, 2.505


sim.status()
print(sim.particles[1].orbit)

orbits = sim.calculate_orbits()
n1 = orbits[0].n
n2 = orbits[1].n
T1 = orbits[0].P
T2 = orbits[1].P
ratio = n1/n2
print("n1=",n1,"n2=",n2)
print("T1=",T1,"T2=",T2)
print("ratio=",ratio)


particles = sim.particles
Noutputs = 1000
times = np.linspace(0, 70, Noutputs) #create an array of time
x0 = np.zeros(Noutputs)
y0 = np.zeros(Noutputs)
x1 = np.zeros(Noutputs)
y1 = np.zeros(Noutputs)
x2 = np.zeros(Noutputs)
y2 = np.zeros(Noutputs)
e2 = np.zeros(Noutputs)

for i,time in enumerate(times):
    sim.integrate(time, exact_finish_time=0)
    x0[i] = particles[0].x
    y0[i] = particles[0].y
    x1[i] = particles[1].x
    y1[i] = particles[1].y
    x2[i] = particles[2].x
    y2[i] = particles[2].y
    e2[i] = particles[2].e


theta2=np.arctan2(y2, x2)
r2=pow((x2*x2+y2*y2), 1/2)    

theta=np.arctan2((y1-y0), (x1-x0))
x2_rf=x2*np.cos(theta)+y2*np.sin(theta) #massless particle in rotating frame
y2_rf=-x2*np.sin(theta)+y2*np.cos(theta)
theta2_rf=np.arctan2(y2_rf, x2_rf)
r2_rf=pow((x2_rf*x2_rf+y2_rf*y2_rf), 1/2)


x0_rf=x0*np.cos(theta)+y0*np.sin(theta) #star A in rotating frame
y0_rf=-x0*np.sin(theta)+y0*np.cos(theta)
theta0_rf=np.arctan2(y0_rf, x0_rf)
r0_rf=pow((x0_rf*x0_rf+y0_rf*y0_rf), 1/2)

x1_rf=x1*np.cos(theta)+y1*np.sin(theta) #star B in rotating frame
y1_rf=-x1*np.sin(theta)+y1*np.cos(theta)
theta1_rf=np.arctan2(y1_rf, x1_rf)
r1_rf=pow((x1_rf*x1_rf+y1_rf*y1_rf), 1/2)


datatheta2_rf = pd.DataFrame(theta2_rf)
datar2_rf = pd.DataFrame(r2_rf)
datatheta2r2_rf = pd.concat([datatheta2_rf, datar2_rf],axis=1,ignore_index=True) #merge
# datatheta2r2_rf.to_csv('./desktop/data/2.495.csv', header=None, index=False)


fig1=plt.figure(figsize=(6,6))
ax1=plt.subplot(111)
ax1.set_xlim([-4,4])
# ax1.set_ylim([0, 1])
# plt.title("3:2 r-theta")
# plt.title(r"ri=15, $\alpha$=0.5, e=0""\n")
#r'$\alpha > \beta$'
plt.xlabel(r"$\theta$")
plt.ylabel("r")
plt.scatter(theta2_rf, r2_rf, s=0.5, color='#4169E1', linewidth=0.1);
#plt.savefig("./desktop/3:2rtheta.png", dpi=400)
plt.show()

# fig2=plt.figure(figsize=(5,5))
# ax2=plt.subplot(111)
# # ax2.set_xlim([-0.8,1])
# # ax2.set_ylim([-0.8,1])
# # plt.title(r"ri=5, $\alpha$=0.5, e=0")
# # plt.title("3:2 x-y")
# plt.xlabel("x")
# plt.ylabel("y")
# plt.plot(x2_rf, y2_rf, color='b', linewidth=1);
# # plt.savefig("./desktop/3:2.png")
# plt.show()

# fig3=plt.figure(figsize=(5,5))
# ax3=plt.subplot(111)
# ax3.set_xlim([-2,2])
# ax3.set_ylim([-2,2])
# plt.title("stars")
# plt.xlabel("x")
# plt.ylabel("y")
# plt.plot(x1, y1, color='b', linewidth=1);
# plt.plot(x0, y0, color='b', linewidth=1);
# #plt.savefig("./desktop/test.png")
# plt.show()

# fig4=plt.figure(figsize=(5,5))
# ax4=plt.subplot(111)
# # ax4.set_xlim([-2,2])
# # ax4.set_ylim([-2,2])
# plt.xlabel(r"$\theta$")
# plt.ylabel("e")
# plt.plot(theta2_rf, e2, color='b', linewidth=1);
# #plt.savefig("./desktop/test.png")
# plt.show()
