import csv
import time
import math
import numpy as np
import pandas as pd
from scipy import optimize
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
import rebound

start=time.clock()

sim = rebound.Simulation()
sim.integrator = "whfast"
sim.dt = 1e-5 #timestep to start with


# alpha=0.5 #massfunction, alpha>=0.5, m1<=m2
# e=0
# vy1=pow((1-e)*(1-alpha), 1/2)*(1-alpha)/alpha
# vy0=-alpha/(1-alpha)*pow((1-e)*(1-alpha), 1/2)*(1-alpha)/alpha
# sim.add(m=1, x=-alpha, y=0, z=0, vx=0, vy=vy0, vz=0) #star A
# sim.add(m=alpha/(1-alpha), x=1-alpha, y=0, z=0, vx=0, vy=vy1, vz=0) #star B
sim.add(m = 1)
sim.add(m = 1, a = 1, e = 0)
sim.move_to_com()
sim.save("binary.bin")
sim.status()
print(sim.particles[1].orbit)
del sim

def delta(vy2_initial):
    print("vy2_initial for test=",vy2_initial)
    sim = rebound.Simulation("binary.bin")
    vy1_initial = sim.particles[1].vy
    ri=2.499 # initial radius of the test particle
    #vy2_initial=vy2_rf_initial+omega_rel*ri #initial velocity of vy2 in the inertial frame
    #vy2_rf_initial = vy2_initial - ri*vy1_initial/0.5
    sim.add(x=ri, vy=vy2_initial)
    particles = sim.particles
    Noutputs = 100000
    times = np.linspace(15, 23, Noutputs) #create an array of time
    x0 = np.zeros(Noutputs)
    y0 = np.zeros(Noutputs)
    x1 = np.zeros(Noutputs)
    y1 = np.zeros(Noutputs)
    x2 = np.zeros(Noutputs)
    y2 = np.zeros(Noutputs)

    for i,time in enumerate(times):
        sim.integrate(time, exact_finish_time=0) # 1 means outputs at exactly the time specified
        x0[i] = particles[0].x
        y0[i] = particles[0].y
        x1[i] = particles[1].x
        y1[i] = particles[1].y
        x2[i] = particles[2].x
        y2[i] = particles[2].y

    theta=np.arctan2((y1-y0), (x1-x0)) # angle the +x axis rotates
    x2_rf=x2*np.cos(theta)+y2*np.sin(theta) # massless particle in rotating frame
    y2_rf=-x2*np.sin(theta)+y2*np.cos(theta)
    theta2_rf=np.arctan2(y2_rf, x2_rf)
    r2_rf=pow((x2_rf*x2_rf+y2_rf*y2_rf), 1/2)
#     vy2_rf = vy2 - x2_rf*vy1_initial/0.5 # only applies when particle crosses +x axis

    theta2_rf_findt=np.where(abs(theta2_rf)<1e-5) # condition when the particle arrives at +x axis in RF

#     print(theta2_rf_findt)
#     print(theta2_rf[theta2_rf_findt])
    position=theta2_rf_findt[0][0]
    x2_rf_test=x2_rf[position] #x coordiinate of test particle when arriving at +x axis
#     print(x2_rf_test)
    delta=x2_rf_test-ri # delta=0 is the necessary but not sufficient condition for periodic orbit
    print("delta=",delta)
    del sim
    return delta

vy2_initial = optimize.bisect(delta, 0.896715, 0.896755)
print("v2_initial=",vy2_initial)

# delta(0.896540)

end=time.clock()
print("Running time: %s Seconds"%(end-start))
