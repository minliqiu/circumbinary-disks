import csv
import time
import math
import rebound
import numpy as np
import pandas as pd
# get_ipython().magic('matplotlib inline')
%matplotlib inline
import matplotlib.pyplot as plt
from itertools import combinations


start=time.clock()

# set up initially periodic orbits
sim = rebound.Simulation()
sim.integrator = "ias15" # default integrator; non-symplectic integrator with an adaptive timestep scheme
sim.dt = 1e-5
sim.add(m=1)
sim.add(m=0.1165, a=1, e=0.024)
sim.move_to_com()
sim.save("primaries.bin")
del sim


def setupSimulation(N_testparticle):
    sim = rebound.Simulation("primaries.bin")
    a_initial = np.linspace(2.695, 2.705, N_testparticle)
    for a in a_initial:
        sim.add(m=1e-100, a=a, f=np.random.rand()*2.*np.pi, e=0, r=2.5*1e-3) # random true anomaly, 2*radius = s_grid
    return sim


# main body
N_testparticle = 1000 # not 1e4
sim = setupSimulation(N_testparticle)

orbits = sim.calculate_orbits()
T1= orbits[0].P
print("T1=",T1)

sim.collision = "direct"
sim.collision_resolve = "hardsphere"
const = 0.3
def epsilon(r, const):
    eps = const
#     print("eps=",eps)
    return eps
sim.coefficient_of_restitution = epsilon

n = 5000
endtime = n*T1
Noutputs = n+1
times = np.linspace(0, endtime, Noutputs)                                          
ps = sim.particles
v_rel = np.zeros(Noutputs)
for i,t in enumerate(times):
    sim.integrate(t,exact_finish_time=0)
    cps = [] # save all the colliding particles
    for p in sim.particles:
        if abs(p.lastcollision-sim.t)<0.2:
            cps.append(p) # get all the colliding particles colliding at t=sim.t
#     print(cps, sim.t)
    print("number of particles that collide =",len(cps))
    # Find two closest particles
    if len(cps) == 0:
        v_rel[i] = v_rel[i-1]
    else:
        min_d2 = 1e9 # large number
        for i1, i2 in combinations(range(len(cps)),2): # get all pairs of indices
            dp = cps[i1] - cps[i2]   # Calculates the coponentwise difference between particles 
            d2 = dp.x**2+dp.y**2
            if d2<min_d2:
                min_d2 = d2
                col_i1 = i1
                col_i2 = i2
        cp1, cp2 = cps[col_i1], cps[col_i2]
        dcp = cp1 - cp2
        v_rel[i] = np.sqrt(dcp.vx**2+dcp.vy**2) # average relative velocity within the time
    
    print(v_rel[i]) # probably relative speed after collision

data_v_rel = pd.DataFrame(v_rel)
# data_v_rel.to_csv('./desktop/v_rel_q=0.1165_e=0.024_r=2.7_n=10000.csv', header=None, index=False)

# fig = plt.figure(figsize=(10,6))
# ax = plt.subplot(111)
# ax.set_xlim([0,endtime])
# ax.set_ylim([-0.001, 0.15])
# plt.title("relative speed")
# plt.xlabel("t")
# plt.ylabel("v_rel")
# plt.scatter(times, v_rel, s=1, color='#B0C4DE', linewidth=1, 
#             label="eps = 0.3\n\nq = 0.1165\n\ne_b = 0.024\n\n2.52 <= r <= 2.53");
# plt.legend()
# plt.savefig("./desktop/v_rel_q=0.1165_e=0.024_r=2.525.png", dpi=400)
# fig.show()


coords = np.zeros((2,sim.N))
for i in range(sim.N):
    coords[0][i], coords[1][i] = sim.particles[i].x, sim.particles[i].y
fig, ax = plt.subplots()
ax.axis('equal')
ax.set_xlim([-5,5])
ax.set_ylim([-5,5])
ax.scatter(coords[0],coords[1])
ax.scatter(sim.particles[1].x,sim.particles[1].y); 
fig.show()

end=time.clock()
print("Running time: %s Seconds"%(end-start))

# n=2500; Running time: 29672.51835 Seconds
# n=5000; Running time: 40998.709229 Seconds
